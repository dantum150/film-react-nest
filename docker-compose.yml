services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend-container
    volumes:
      - frontend-dist:/app/dist
    networks:
      - network
    command: sh -c "npm run build && tail -f /dev/null"

  backend:
    build:
      context: ./backend
    container_name: backend-container
    volumes:
      - backend-dist:/app/dist
    networks:
      - network
    ports:
      - "3000:3000"
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
      LOGGER_TYPE: ${LOGGER_TYPE}

  postgres:
    image: postgres:16
    container_name: postgres-container
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - network
    ports:
      - "5432:5432"
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-container
    restart: always
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - network

  nginx:
    image: nginx:alpine
    container_name: nginx-container
    ports:
      - "80:80"
      - 443:443
    volumes:
      - frontend-dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - network

volumes:
  frontend-dist:
  backend-dist:
  pgdata:

networks:
  network:
    driver: bridge
